@page "/buscarautos"
@inject HttpClient httpClient
@using System.Text.Json
@inject NavigationManager NavigationManager

<style>
    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .form-group label {
        display: block;
        font-weight: bold;
    }

    .form-group input[type="text"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .form-group button {
        padding: 8px 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    h1 {
        font-size: 24px;
        margin-bottom: 20px;
    }

    h2 {
        font-size: 20px;
        margin-top: 20px;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    li {
        margin: 10px 0;
    }

    img {
        max-width: 100%;
        height: auto;
    }

    p {
        margin-top: 20px;
        font-style: italic;
    }
</style>
<h1>Buscar Autos por placa</h1>

<form @onsubmit="RealizarBusqueda">
    <div class="form-group">
        <label for="placa">Placa:</label>
        <input type="text" id="placa" @bind="placaABuscar" />
    </div>
    <button type="submit" class="btn btn-primary">Buscar</button>
</form>


<!-- Resultados de la búsqueda -->
@if (resultados != null && resultados.Any())
{
    <h2>Resultados de la búsqueda:</h2>
    <ul>
        @foreach (var auto in resultados)
        {
            <li>@auto.marca - @auto.modelo</li>
            <img src="@auto.urlImagen" width="400"/><br>
            <button class="btn btn-primary" @onclick="() => MostrarDetalles(auto.id)">Detalles</button>
        }
    </ul>
}
else if (resultados != null)
{
    <p>No se encontraron resultados.</p>
}

@code {
    private string placaABuscar;
    private List<Auto> resultados;

    private async Task RealizarBusqueda()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(placaABuscar))
            {
                // Si la placa a buscar está vacía, no realizar la búsqueda.
                resultados = null;
                return;
            }

            // Realiza una solicitud HTTP a la API para obtener todos los autos.
            var response = await httpClient.GetStringAsync("http://back/api/autos");
            var autos = JsonSerializer.Deserialize<List<Auto>>(response);

            // Filtra los autos según la placa ingresada.
            resultados = autos.Where(a => a.placa == placaABuscar).ToList();
        }
        catch (HttpRequestException ex)
        {
            // Manejar errores de solicitud HTTP de manera más robusta, puedes registrarlos o mostrar un mensaje de error.
            Console.WriteLine($"Error de solicitud HTTP: {ex.Message}");
        }
    }

    private void MostrarDetalles(int id)
    {
        NavigationManager.NavigateTo($"/detallesauto/{id}");
    }

    public class Auto
    {
        public int id { get; set; }
        public string marca { get; set; }
        public string modelo { get; set; }
        public string placa { get; set; }
        public string color { get; set; }
        public double kilometraje { get; set; }
        public string urlImagen { get; set; }
    }
}





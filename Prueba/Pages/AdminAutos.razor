@page "/admin"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

@using System.Net.Http.Json

@inject NavigationManager NavigationManager

<h1 class="display-4">Administrar Autos</h1>

@if (autos != null && autos.Any())
{
    <!-- Mostrar la lista de autos en una tabla -->
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Marca</th>
                <th>Modelo</th>
                <th>Placa</th>
                <th>Color</th>
                <th>Kilometraje</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var auto in autos)
            {
                <tr>
                    <td>@auto.marca</td>
                    <td>@auto.modelo</td>
                    <td>@auto.placa</td>
                    <td>@auto.color</td>
                    <td>@auto.kilometraje</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditarAuto(auto)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmarEliminacion(auto)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay autos para mostrar.</p>
}

<!-- Agregar nuevo auto -->
<button class="btn btn-primary" @onclick="MostrarFormulario">Agregar Nuevo Auto</button>

@if (mostrarFormulario)
{
    <!-- Formulario para agregar o editar un auto -->
    <h2 class="mt-4">@((ModoEdicion) ? "Editar Auto" : "Agregar Nuevo Auto")</h2>
    <form @onsubmit="@(ModoEdicion ? (Func<Task>)ActualizarAuto : AgregarAuto)" class="form">
        <div class="form-group">
            <label for="marca">Marca:</label>
            <input type="text" class="form-control" id="marca" @bind="AutoAEditar.marca" required />
        </div>
        <div class="form-group">
            <label for="modelo">Modelo:</label>
            <input type="text" class="form-control" id="modelo" @bind="AutoAEditar.modelo" required />
        </div>
        <div class="form-group">
            <label for="placa">Placa:</label>
            <input type="text" class="form-control" id="placa" @bind="AutoAEditar.placa" required />
        </div>
        <div class="form-group">
            <label for="color">Color:</label>
            <input type="text" class="form-control" id="color" @bind="AutoAEditar.color" required />
        </div>
        <div class="form-group">
            <label for="kilometraje">Kilometraje:</label>
            <input type="number" class="form-control" id="kilometraje" @bind="AutoAEditar.kilometraje" required />
        </div>
        <div class="form-group">
            <label for="color">URL de la imagen:</label>
            <input type="text" class="form-control" id="color" @bind="AutoAEditar.urlImagen" required />
        </div>
        <button type="submit" class="btn btn-success">@((ModoEdicion) ? "Guardar" : "Agregar")</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelarAgregarEditarAuto">Cancelar</button>
    </form>
}

@if (AutoAEliminar != null)
{
    <div class="alert alert-warning" role="alert">
        ¿Estás seguro de que deseas eliminar el auto con ID @AutoAEliminar.id?
        <button class="btn btn-danger" @onclick="() => EliminarAuto(AutoAEliminar)">Si</button>
        <button class="btn btn-secondary" @onclick="CancelarEliminarAuto">No</button>
    </div>
}


@code {
    private List<Auto> autos;
    private HttpClient httpClient;
    private Auto nuevoAuto = new Auto();
    private bool mostrarFormulario = false;
    private bool ModoEdicion;
    private Auto AutoAEditar = new Auto();
    private Auto AutoAEliminar;
    private string url = "http://back/";
    protected override async Task OnInitializedAsync()
    {
        httpClient = new HttpClient();
        await CargarAutos();
    }

    private async Task CargarAutos()
    {
        try
        {
            var response = await httpClient.GetStringAsync($"{url}api/autos");
            autos = JsonSerializer.Deserialize<List<Auto>>(response);
        }
        catch (HttpRequestException)
        {
            // Manejar errores de solicitud HTTP
        }
    }

    private void EditarAuto(Auto auto)
    {
        AutoAEditar = auto; // Asigna el auto que deseas editar a AutoAEditar
        // Cambia a modo de edición y muestra el formulario

    // Muestra los datos JSON en la consola (o en donde desees)
        Console.WriteLine(AutoAEditar.id);
        ModoEdicion = true;
        mostrarFormulario = true;
    }


    private void ConfirmarEliminacion(Auto auto)
    {
        AutoAEliminar = auto;

    }
    private async Task EliminarAuto(Auto auto)
    {
        // Aquí debes enviar una solicitud HTTP DELETE para eliminar el auto con el ID de "auto.id"
        // Luego, actualiza la lista de autos y oculta la alerta
        // Por ejemplo:
        var response = await httpClient.DeleteAsync($"{url}api/autos/{auto.id}");
        if (response.IsSuccessStatusCode)
        {
             AutoAEliminar = null;
             await CargarAutos();
         }
         else
         {
         }
    }

    private void CancelarEliminarAuto()
    {
        AutoAEliminar = null; // Oculta la alerta y restablece la variable
    }

    private void MostrarFormulario()
    {
        mostrarFormulario = true;
        if (!ModoEdicion)
        {
            // Si no estás en modo de edición, asegúrate de que AutoAEditar esté vacío.
            AutoAEditar = new Auto();
        }
    }

    private void CancelarAgregarEditarAuto()
    {
        ModoEdicion = false;
        mostrarFormulario = false;
        nuevoAuto = new Auto();
    }


    private async Task AgregarAuto()
{
    // Realiza una solicitud GET para obtener la lista actual de autos
    var response = await httpClient.GetAsync($"{url}api/autos");
    
    if (response.IsSuccessStatusCode)
    {
        // Lee el contenido de la respuesta
        var content = await response.Content.ReadAsStringAsync();

        // Deserializa la respuesta en una lista de autos
        var listaDeAutos = JsonSerializer.Deserialize<List<Auto>>(content);

        // Encuentra el auto con el id más alto
        int maxId = listaDeAutos.Any() ? listaDeAutos.Max(auto => auto.id) : 0;

        // Asigna un nuevo id único al nuevo auto
        AutoAEditar.id = maxId + 1;
        Console.WriteLine(AutoAEditar.marca);
        // Luego, puedes enviar la solicitud POST con el nuevo id
        var responsePost = await httpClient.PostAsJsonAsync($"{url}api/autos", AutoAEditar);

        if (responsePost.IsSuccessStatusCode)
        {
            mostrarFormulario = false;
            AutoAEditar = new Auto();
            await CargarAutos();
        }
        else
        {
            // Maneja el escenario en el que la solicitud POST no fue exitosa
        }
    }
    else
    {
        // Maneja el escenario en el que la solicitud GET para obtener la lista de autos no fue exitosa
    }
}


    private async Task ActualizarAuto()
    {
        // Aquí debes enviar una solicitud HTTP PUT para actualizar el auto con los datos en "nuevoAuto"
        // Utiliza AutoAEditar.id para identificar el auto que deseas actualizar
        // Luego, actualiza la lista de autos y restablece el modo de edición y formulario

        // Por ejemplo:
        var response = await httpClient.PutAsJsonAsync($"{url}api/autos/{AutoAEditar.id}", AutoAEditar);

        if (response.IsSuccessStatusCode)
        {
            ModoEdicion = false;
            mostrarFormulario = false;
            AutoAEditar = new Auto();
            await CargarAutos();
        }
        else
        {
            // Maneja el escenario en el que la solicitud no fue exitosa, por ejemplo, mostrando un mensaje de error.
        }
    }



    private class Auto
    {
        public int id { get; set; }
        public string marca { get; set; }
        public string color { get; set; }
        public string modelo { get; set; }
        public string placa { get; set; }
        public double kilometraje { get; set; }
        public string urlImagen { get; set; }
    }
}
